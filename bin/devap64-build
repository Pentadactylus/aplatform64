#!/bin/bash
#######################################
# Build ansible galaxy packages
#
# Author: serdigital64 (https://github.com/serdigital64)
# License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt)
# Repository: https://github.com/serdigital64/aplatform64
# Version: 1.1.0
#######################################

[[ -d "$APLATFORM64_BIN" ]] || { echo "Error: dev environment not set"; exit 1; }

# shellcheck disable=SC2034
BL64_LIB_STRICT='0'
# shellcheck disable=SC1091
source "${APLATFORM64_BIN}/bashlib64.bash" || exit 1

function devap64_build_test() {

  local target="$1"
  local collection=''

  cd "$APLATFORM64_BUILD_DEV" || return 1

  if [[ -z "$target" ]]; then
    target="$(
      cd "$APLATFORM64_COLLECTIONS" || return 1
      echo *
    )"
  fi

  for collection in $target; do
    bl64_msg_show_task 'remove old collection package'
    bl64_os_rm_file $APLATFORM64_NAMESPACE-${collection}-*.tar.gz

    bl64_msg_show_task 'generate new collection package'
    "$APLATFORM64_CMD_ANSIBLE_GALAXY" collection build "${APLATFORM64_COLLECTIONS}/${collection}"
  done

  bl64_msg_show_task 'remove version tag from package file names'
  for collection in $APLATFORM64_NAMESPACE-*-*.tar.gz; do
    $BL64_OS_ALIAS_MV "$collection" "${collection%-*}.tar.gz"
  done

}

function devap64_build_prod() {

  local target="$1"
  local collection=''

  cd "$APLATFORM64_BUILD_PROD" || return 1

  if [[ -z "$target" ]]; then
    target="$(
      cd "$APLATFORM64_COLLECTIONS" || return 1
      echo *
    )"
  fi

  for collection in $target; do
    bl64_msg_show_task 'remove old collection package'
    bl64_os_rm_file $APLATFORM64_NAMESPACE-${collection}-*.tar.gz

    bl64_msg_show_task 'generate new collection package'
    "$APLATFORM64_CMD_ANSIBLE_GALAXY" collection build "$APLATFORM64_COLLECTIONS/$collection"
  done

}

function devap64_build_publish() {

  local target="$1"
  local collection=''

  cd "$APLATFORM64_BUILD_PROD" || return 1
  # shellcheck disable=SC1090
  source "$APLATFORM64_SECRETS"

  if [[ -z "$target" ]]; then
    target="$(
      cd "$APLATFORM64_COLLECTIONS" || return 1
      echo *
    )"
  fi

  for collection in $target; do
    bl64_msg_show_task 'publish collection package'
    "$APLATFORM64_CMD_ANSIBLE_GALAXY" collection publish --token "$APLATFORM64_SECRET_GALAXY_TOKEN" $APLATFORM64_NAMESPACE-${collection}-*.tar.gz
  done

}

function devap64_build_check() {

  bl64_check_directory "$APLATFORM64_BUILD_DEV" &&
    bl64_check_directory "$APLATFORM64_BUILD_PROD" &&
    bl64_check_directory "$APLATFORM64_COLLECTIONS" &&
    bl64_check_file "$APLATFORM64_VEW_LOADER" &&
    bl64_check_file "$APLATFORM64_SECRETS" &&
    bl64_check_command "$APLATFORM64_CMD_ANSIBLE_GALAXY"

}

function devap64_build_help() {

  bl64_msg_show_usage \
    '<-t|-p|u> [-c collection] [-h]' \
    'Build ansible galaxy packages' \
    '
  -t           : build testing packages
  -p           : build production packages
  -u           : publish production packages (needs Galaxy token set in APLATFORM64_SECRET_GALAXY_TOKEN)
    ' '' '
  -c collection: limit actions to the specified collection.
    '

}

#
# Main
#

declare devap64_build_status=1
declare devap64_build_command=''
declare devap64_build_command_tag=''
declare devap64_build_option=''
declare devap64_build_collection=''

(($# == 0)) && devap64_build_help && exit 1
while getopts ':tpuc:h' devap64_build_option; do
  case "$devap64_build_option" in
  t)
    devap64_build_command='devap64_build_test'
    devap64_build_command_tag='testing package build'
    ;;
  p)
    devap64_build_command='devap64_build_prod'
    devap64_build_command_tag='production package build'
    ;;
  u)
    devap64_build_command='devap64_build_publish'
    devap64_build_command_tag='publishing packages'
    ;;
  c) devap64_build_collection="$OPTARG" ;;
  h) devap64_build_help && exit ;;
  \?) devap64_build_help && exit 1 ;;
  esac
done
[[ -z "$devap64_build_command" ]] && devap64_build_help && exit 1
devap64_build_check || exit 1
cd "$APLATFORM64_ROOT" || exit 1

# Activate the Python virtual environment
if [[ -z "$VIRTUALENVWRAPPER_ENV_BIN_DIR" ]]; then
  bl64_msg_show_task "load Python virtual environment wrapper ($APLATFORM64_VEW_LOADER)"
  # shellcheck disable=SC1090
  source "$APLATFORM64_VEW_LOADER"
fi

if [[ -z "$VIRTUAL_ENV" ]]; then
  bl64_msg_show_task "set Python virtual environment to: $APLATFORM64_VEW_WORKSPACE"
  workon "$APLATFORM64_VEW_WORKSPACE"
fi

if [[ -z "$VIRTUAL_ENV" ]]; then
  bl64_msg_show_error 'unable to initialize the Python virtual environment for Ansible'
  exit 1
fi

bl64_msg_show_batch_start "$devap64_build_command_tag"
case "$devap64_build_command" in
'devap64_build_test' | 'devap64_build_prod' | 'devap64_build_publish') "$devap64_build_command" "$devap64_build_collection" ;;
esac
devap64_build_status=$?

bl64_msg_show_batch_finish $devap64_build_status "$devap64_build_command_tag"
exit $devap64_build_status
