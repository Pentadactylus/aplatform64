#!/usr/bin/env bash
#######################################
# Build ansible galaxy packages
#
# Author: serdigital64 (https://github.com/serdigital64)
# License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt)
# Repository: https://github.com/serdigital64/aplatform64
# Version: 1.4.1
#######################################

# shellcheck source=SCRIPTDIR/devap-set
source './bin/devap-set' || {
  echo 'unable to load dev env'
  exit 1
}

# shellcheck source-path=SCRIPTDIR/../lib disable=SC2154
source "$DEVAP_BASHLIB64" || exit 1

function devap_build_publish() {
  local target="$1"
  local collection=''
  local publish_wait=2

  cd "$DEVAP_BUILD_PROD" || return 1

  [[ -z "$target" ]] && target="$(devap_get_collections)"

  for collection in $target; do
    bl64_msg_show_task 'publish collection package'
    # shellcheck disable=SC2086
    bl64_ans_run_ansible_galaxy \
      collection publish --token "$DEVAP_SECRET_GALAXY_TOKEN" $DEVAP_NAMESPACE-${collection}-*.tar.gz
    sleep $publish_wait
  done
}

function devap_build_test() {
  local target="$1"
  local collection=''

  cd "$DEVAP_BUILD_DEV" || return 1

  [[ -z "$target" ]] && target="$(devap_get_collections)"

  for collection in $target; do
    bl64_msg_show_task 'remove old collection package'
    # shellcheck disable=SC2086
    bl64_fs_rm_file $DEVAP_NAMESPACE-${collection}-*.tar.gz

    bl64_msg_show_task 'generate new collection package'
    bl64_ans_run_ansible_galaxy \
      collection build "${DEVAP_COLLECTIONS}/${collection}" || return $?
  done

  bl64_msg_show_task 'remove version tag from package file names'
  # shellcheck disable=SC2231
  for collection in $DEVAP_NAMESPACE-*-*.tar.gz; do
    bl64_fs_run_mv "$collection" "${collection%-*}.tar.gz"
  done
}

function devap_build_refresh() {
  local target="$1"
  local collection=''
  local role=''

  [[ -z "$target" ]] && target="$(devap_get_collections)"

  # Syncrhonize collection vs master
  for collection in $target; do
    bl64_msg_show_task "refresh license (master -> ${collection})" &&
      bl64_fs_cp_file "${DEVAP_DOCS}/contributing/COPYING" "$DEVAP_COLLECTIONS/${collection}/COPYING" &&
      bl64_fs_cp_file "${DEVAP_DOCS}/contributing/CODE_OF_CONDUCT.md" "$DEVAP_COLLECTIONS/${collection}/CODE_OF_CONDUCT.md" || return 1

    bl64_msg_show_task "refresh tool configurations (master -> ${collection})" &&
      bl64_fs_cp_file "${DEVAP_MOLECULE_MAIN}" "$DEVAP_COLLECTIONS/${collection}" &&
      bl64_fs_cp_file "${DEVAP_ANSIBLE_LINT}" "$DEVAP_COLLECTIONS/${collection}" &&
      bl64_fs_cp_file "${YAMLLINT_CONFIG_FILE}" "$DEVAP_COLLECTIONS/${collection}" || return 1

    bl64_msg_show_task "sync role doc (${collection} -> master)" &&
      bl64_fs_cp_file "$DEVAP_COLLECTIONS/${collection}/README.md" "${DEVAP_DOCS}/collections/${collection}.md" || return 1

    # shellcheck disable=SC2164
    for role in $(
      cd "$DEVAP_COLLECTIONS/${collection}/roles"
      echo *
    ); do
      bl64_msg_show_task "sync examples (${role} -> master)"
      [[ -f "$DEVAP_COLLECTIONS/${collection}/playbooks/${role}.yml" ]] &&
        bl64_fs_cp_file "$DEVAP_COLLECTIONS/${collection}/playbooks/${role}.yml" "${DEVAP_DOCS}/examples/${role}.yml"

      bl64_msg_show_task "refresh license (master -> ${role})" &&
        bl64_fs_cp_file "${DEVAP_DOCS}/contributing/COPYING" "$DEVAP_COLLECTIONS/${collection}/roles/${role}/COPYING" &&
        bl64_fs_cp_file "${DEVAP_DOCS}/contributing/CODE_OF_CONDUCT.md" "$DEVAP_COLLECTIONS/${collection}/roles/${role}/CODE_OF_CONDUCT.md" &&
        bl64_msg_show_task "sync docs (${role} -> master)" &&
        bl64_fs_cp_file "$DEVAP_COLLECTIONS/${collection}/roles/${role}/README.md" "${DEVAP_DOCS}/roles/${role}.md" || return 1

    done

  done

  return 0
}

function devap_build_cli() {
  local target=''
  local name=''
  local target_file="$DEVAP_TMP/devap-build-collections.sh"

  for name in $(devap_get_collections); do
    target="${target} ${DEVAP_NAMESPACE}.${name}"
  done
  printf 'readonly AP64_COLLECTIONS="%s"\n' "$target" >"$target_file"

  bl64_msg_show_task "build CLI (${DEVAP_BUILD_CLI})"
  bl64_fs_merge_files \
    '0755' \
    "$BL64_LIB_DEFAULT" \
    "$BL64_LIB_DEFAULT" \
    "$BL64_LIB_VAR_ON" \
    "$DEVAP_BUILD_CLI" \
    "${DEVAP_SRC}/cli/ap64-header.bash" \
    "$DEVAP_BASHLIB64" \
    "${DEVAP_SRC}/cli/ap64-env.bash" \
    "$target_file" \
    "${DEVAP_SRC}/cli/ap64-functions.bash" \
    "${DEVAP_SRC}/cli/ap64-main.bash"
}

function devap_build_prod() {
  local target="$1"
  local collection=''

  cd "$DEVAP_BUILD_PROD" || return 1

  [[ -z "$target" ]] && target="$(devap_get_collections)"

  for collection in $target; do
    bl64_msg_show_task 'remove old collection package'
    # shellcheck disable=SC2086
    bl64_fs_rm_file ${DEVAP_NAMESPACE}-${collection}-*.tar.gz

    bl64_msg_show_task 'generate new collection package'
    bl64_ans_run_ansible_galaxy \
      collection build "$DEVAP_COLLECTIONS/$collection" || return $?
  done
}

function devap_get_collections() {
  cd "$DEVAP_COLLECTIONS" || return 1
  echo *
}

function devap_build_check() {
  [[ -z "$devap_build_command" ]] && devap_build_help && return 1

  bl64_fs_create_dir \
    "$BL64_LIB_DEFAULT" \
    "$BL64_LIB_DEFAULT" \
    "$BL64_LIB_DEFAULT" \
    "$DEVAP_BUILD_DEV" \
    "$DEVAP_BUILD_PROD" \
    "$DEVAP_COLLECTIONS" &&
    bl64_ans_setup "$DEVAP_PYTHON_VENV_BIN"

}

function devap_build_help() {

  bl64_msg_show_usage \
    '<-r|-i|-t|-p|-uu> [-c collection] [-h]' \
    'Build ansible galaxy packages' \
    '
  -r           : refresh dynamic content
  -i           : build CLI
  -t           : build testing packages
  -p           : build production packages
  -u           : publish production packages (needs Galaxy token set in DEVAP_SECRET_GALAXY_TOKEN)
    ' '' '
  -c collection: limit actions to the specified collection.
    '

}

#
# Main
#

declare devap_build_status=1
declare devap_build_command=''
declare devap_build_command_tag=''
declare devap_build_option=''
declare devap_build_collection=''

(($# == 0)) && devap_build_help && exit 1
while getopts ':ritpuc:h' devap_build_option; do
  case "$devap_build_option" in
  r)
    devap_build_command='devap_build_refresh'
    devap_build_command_tag='refresh collection doc'
    ;;
  i)
    devap_build_command='devap_build_cli'
    devap_build_command_tag='build CLI'
    ;;
  t)
    devap_build_command='devap_build_test'
    devap_build_command_tag='testing package build'
    ;;
  p)
    devap_build_command='devap_build_prod'
    devap_build_command_tag='production package build'
    ;;
  u)
    devap_build_command='devap_build_publish'
    devap_build_command_tag='publishing packages'
    ;;
  c) devap_build_collection="$OPTARG" ;;
  h) devap_build_help && exit ;;
  *) devap_build_help && exit 1 ;;
  esac
done
devap_build_check &&
  cd "$DEVAP_ROOT" ||
  exit 1

bl64_msg_show_batch_start "$devap_build_command_tag"
case "$devap_build_command" in
'devap_build_test' | 'devap_build_prod' | 'devap_build_publish' | 'devap_build_refresh') "$devap_build_command" "$devap_build_collection" ;;
'devap_build_cli') "$devap_build_command" ;;
*) bl64_check_show_undefined "$devap_build_command" ;;
esac
devap_build_status=$?

bl64_msg_show_batch_finish $devap_build_status "$devap_build_command_tag"
exit $devap_build_status
